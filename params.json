{"name":"apns","tagline":"Golang package for working with Apple's Push Notification and Feedback Services","body":"# apns\r\n\r\nUtilities for Apple Push Notification and Feedback Services.\r\n\r\n## Installation\r\n\r\n`go get github.com/anachronistic/apns`\r\n\r\n## Documentation\r\n\r\n- [APNS package documentation](http://godoc.org/github.com/anachronistic/apns)\r\n- [Information on the APN JSON payloads](http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html)\r\n- [Information on the APN binary protocols](http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/CommunicatingWIthAPS.html)\r\n- [Information on APN troubleshooting](http://developer.apple.com/library/ios/#technotes/tn2265/_index.html)\r\n\r\n## Usage\r\n\r\n### Creating pns and payloads manually\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  apns \"github.com/anachronistic/apns\"\r\n)\r\n\r\nfunc main() {\r\n  payload := apns.NewPayload()\r\n  payload.Alert = \"Hello, world!\"\r\n  payload.Badge = 42\r\n  payload.Sound = \"bingbong.aiff\"\r\n\r\n  pn := apns.NewPushNotification()\r\n  pn.AddPayload(payload)\r\n\r\n  alert, _ := pn.PayloadString()\r\n  fmt.Println(alert)\r\n}\r\n```\r\n\r\n#### Returns\r\n```json\r\n{\r\n  \"aps\": {\r\n    \"alert\": \"Hello, world!\",\r\n    \"badge\": 42,\r\n    \"sound\": \"bingbong.aiff\"\r\n  }\r\n}\r\n```\r\n\r\n### Using an alert dictionary for complex payloads\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  apns \"github.com/anachronistic/apns\"\r\n)\r\n\r\nfunc main() {\r\n  args := make([]string, 1)\r\n  args[0] = \"localized args\"\r\n\r\n  dict := NewAlertDictionary()\r\n  dict.Body = \"Alice wants Bob to join in the fun!\"\r\n  dict.ActionLocKey = \"Play a Game!\"\r\n  dict.LocKey = \"localized key\"\r\n  dict.LocArgs = args\r\n  dict.LaunchImage = \"image.jpg\"\r\n\r\n  payload := apns.NewPayload()\r\n  payload.Alert = dict\r\n  payload.Badge = 42\r\n  payload.Sound = \"bingbong.aiff\"\r\n\r\n  pn := apns.NewPushNotification()\r\n  pn.AddPayload(payload)\r\n\r\n  alert, _ := pn.PayloadString()\r\n  fmt.Println(alert)\r\n}\r\n```\r\n\r\n#### Returns\r\n```json\r\n{\r\n  \"aps\": {\r\n    \"alert\": {\r\n      \"body\": \"Alice wants Bob to join in the fun!\",\r\n      \"action-loc-key\": \"Play a Game!\",\r\n      \"loc-key\": \"localized key\",\r\n      \"loc-args\": [\r\n        \"localized args\"\r\n      ],\r\n      \"launch-image\": \"image.jpg\"\r\n    },\r\n    \"badge\": 42,\r\n    \"sound\": \"bingbong.aiff\"\r\n  }\r\n}\r\n```\r\n\r\n### Setting custom properties\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  apns \"github.com/anachronistic/apns\"\r\n)\r\n\r\nfunc main() {\r\n  payload := apns.NewPayload()\r\n  payload.Alert = \"Hello, world!\"\r\n  payload.Badge = 42\r\n  payload.Sound = \"bingbong.aiff\"\r\n\r\n  pn := apns.NewPushNotification()\r\n  pn.AddPayload(payload)\r\n\r\n  pn.Set(\"foo\", \"bar\")\r\n  pn.Set(\"doctor\", \"who?\")\r\n  pn.Set(\"the_ultimate_answer\", 42)\r\n\r\n  alert, _ := pn.PayloadString()\r\n  fmt.Println(alert)\r\n}\r\n```\r\n\r\n#### Returns\r\n```json\r\n{\r\n  \"aps\": {\r\n    \"alert\": \"Hello, world!\",\r\n    \"badge\": 42,\r\n    \"sound\": \"bingbong.aiff\"\r\n  },\r\n  \"doctor\": \"who?\",\r\n  \"foo\": \"bar\",\r\n  \"the_ultimate_answer\": 42\r\n}\r\n```\r\n\r\n### Sending a notification\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  apns \"github.com/anachronistic/apns\"\r\n)\r\n\r\nfunc main() {\r\n  payload := apns.NewPayload()\r\n  payload.Alert = \"Hello, world!\"\r\n  payload.Badge = 42\r\n  payload.Sound = \"bingbong.aiff\"\r\n\r\n  pn := apns.NewPushNotification()\r\n  pn.DeviceToken = \"YOUR_DEVICE_TOKEN_HERE\"\r\n  pn.AddPayload(payload)\r\n\r\n  client := apns.NewClient(\"gateway.sandbox.push.apple.com:2195\", \"YOUR_CERT_PEM\", \"YOUR_KEY_NOENC_PEM\")\r\n  resp := client.Send(pn)\r\n\r\n  alert, _ := pn.PayloadString()\r\n  fmt.Println(\"  Alert:\", alert)\r\n  fmt.Println(\"Success:\", resp.Success)\r\n  fmt.Println(\"  Error:\", resp.Error)\r\n}\r\n```\r\n\r\n#### Returns\r\n```shell\r\n  Alert: {\"aps\":{\"alert\":\"Hello, world!\",\"badge\":42,\"sound\":\"bingbong.aiff\"}}\r\nSuccess: true\r\n  Error: <nil>\r\n```\r\n\r\n### Checking the feedback service\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  apns \"github.com/anachronistic/apns\"\r\n  \"os\"\r\n)\r\n\r\nfunc main() {\r\n  fmt.Println(\"- connecting to check for deactivated tokens (maximum read timeout =\", apns.FEEDBACK_TIMEOUT_SECONDS, \"seconds)\")\r\n\r\n  client := apns.NewClient(\"gateway.sandbox.push.apple.com:2195\", \"YOUR_CERT_PEM\", \"YOUR_KEY_NOENC_PEM\")\r\n  go client.ListenForFeedback()\r\n\r\n  for {\r\n    select {\r\n    case resp := <-apns.FeedbackChannel:\r\n      fmt.Println(\"- recv'd:\", resp.DeviceToken)\r\n    case <-apns.ShutdownChannel:\r\n      fmt.Println(\"- nothing returned from the feedback service\")\r\n      os.Exit(1)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Returns\r\n```shell\r\n- connecting to check for deactivated tokens (maximum read timeout = 5 seconds)\r\n- nothing returned from the feedback service\r\nexit status 1\r\n```\r\n\r\nYour output will differ if the service returns device tokens.\r\n\r\n```shell\r\n- recv'd: DEVICE_TOKEN_HERE\r\n...etc.\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}